import java.io.File;
import java.io.IOException;
import java.util.Properties;
import java.util.Scanner;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import cox5529.generator.SimpleCompositions;
import cox5529.midi.MIDIFile;

/**
 * Test code.
 * 
 * @author Brandon Cox
 * 		
 */
public class Main {
	
	/**
	 * Test code.
	 * 
	 * @param args unused
	 */
	public static void main(String[] args) {
		boolean test = false;
		int x = 1;
		int y = 3;
		String src = "manger.mid";
		if(!test) {
			System.out.println("In this program, you will be asked to listen to a pair of songs. " + "\nOne song will be composed by a human, and the other will be generated by a computer. " + "\nAfter listening to the songs, you will attempt to determine which song in the pair was composed by a human." + "\nType \"1\" if you agree to continue or \"-1\" if you wish to stop. You may type \"-1\" at any time while this program is running to discontinue and discard your responses.");
			getInput(1, 1);
			System.out.println("Enter the ID number that was sent with this program. This is only done to ensure that I do not receive any duplicate responses.");
			int id = getInput(0, 500);
			System.out.println("Locate a folder titled \"Listen to these\" in the same directory as this program.\nIn this folder, there should be 2 songs, \"Song 0.mid\" and \"Song 1.mid\".\nListen to both of these songs.\nType \"0\" if you believe that \"Song 0.mid\" was composed by a human, or \"1\" if you believe that \"Song 1.mid\" was composed by a human.");
			int gen = (int) (Math.random() * 2);
			int real = 1 - gen;
			try {
				new File(".\\Listen to these").mkdirs();
				MIDIFile source = MIDIFile.read(new File(src), false);
				SimpleCompositions sc = new SimpleCompositions(x, source);
				source.write(new File(".\\Listen to these\\Song " + real + ".mid"), false);
				sc.generateSong(y).write(new File(".\\Listen to these\\Song " + gen + ".mid"), false);
			} catch(IOException e) {
				e.printStackTrace();
			}
			int response = getInput(0, 1);
			sendEmail(id, response == real);
			System.out.println("Results sent. Thank you for participating.");
		} else {
			try {
				MIDIFile source = MIDIFile.read(new File(src), false);
				SimpleCompositions sc = new SimpleCompositions(x, source);
				sc.generateSong(y).write(new File("out.mid"), false);
			} catch(IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private static void sendEmail(int id, boolean result) {
		String addr = "hungman2017@gmail.com";
		String pass = "Password1235";
		String to = "coxb17@asmsa.org";
		Properties props = System.getProperties();
		props.put("mail.smtp.starttls.enable", true); // added this line
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.user", addr);
		props.put("mail.smtp.password", pass);
		props.put("mail.smtp.port", "587");
		props.put("mail.smtp.auth", true);
		
		Session session = Session.getInstance(props, null);
		MimeMessage message = new MimeMessage(session);
		
		// Create the email addresses involved
		try {
			InternetAddress from = new InternetAddress(addr);
			message.setSubject("FIRM Result");
			message.setFrom(from);
			message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
			System.out.println("Sending results...");
			// Create a multi-part to combine the parts
			Multipart multipart = new MimeMultipart("alternative");
			
			// Create your text message part
			BodyPart messageBodyPart = new MimeBodyPart();
			String htmlMessage = "ID: " + id + "\nRESULT: " + result;
			messageBodyPart.setText(htmlMessage);
			
			// Add the text part to the multipart
			multipart.addBodyPart(messageBodyPart);
			
			// Create the html part
			messageBodyPart = new MimeBodyPart();
			
			messageBodyPart.setContent(htmlMessage, "text/html");
			
			// Add html part to multi part
			multipart.addBodyPart(messageBodyPart);
			
			// Associate multi-part with message
			message.setContent(multipart);
			
			// Send message
			Transport transport = session.getTransport("smtp");
			transport.connect("smtp.gmail.com", addr, pass);
			transport.sendMessage(message, message.getAllRecipients());
		} catch(AddressException e) {
			e.printStackTrace();
		} catch(MessagingException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Gets input from the keyboard. Guarantees that input will be between the parameters.
	 * 
	 * @param validStart the first value of valid input
	 * @param validEnd the last value of valid input
	 * @return input from the keyboard between the parameters
	 */
	public static int getInput(int validStart, int validEnd) {
		Scanner s = new Scanner(System.in);
		if(validEnd < validStart) {
			int temp = validStart;
			validStart = validEnd;
			validEnd = temp;
		}
		while(s.hasNext()) {
			String input = s.next();
			try {
				int in = Integer.parseInt(input);
				if(in == -1) {
					System.out.println("Testing has been discontinued. Your responses were not recorded.");
					System.exit(0);
					return -1;
				} else if(in >= validStart && in <= validEnd)
					return in;
				else {
					if(validStart != validEnd)
						System.out.println("You must enter \"-1\" or a number between " + validStart + " and " + validEnd + ".");
					else
						System.out.println("You must enter \"-1\" or \"" + validStart + "\".");
				}
			} catch(Exception e) {
				if(validStart != validEnd)
					System.out.println("You must enter \"-1\" or a number between " + validStart + " and " + validEnd + ".");
				else
					System.out.println("You must enter \"-1\" or \"" + validStart + "\".");
			}
		}
		s.close();
		return -1;
	}
	
}
