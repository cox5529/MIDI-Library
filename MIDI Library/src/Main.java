import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import cox5529.generator.SimpleCompositions;
import cox5529.midi.MIDIFile;

/**
 * Test code.
 * 
 * @author Brandon Cox
 * 		
 */
public class Main {
	
	/**
	 * Test code.
	 * 
	 * @param args unused
	 */
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		String src = "pachelbel-s.mid";
		String debug = "";
		MIDIFile source = null;
		try {
			source = MIDIFile.read(new File(src), false);
		} catch(IOException e1) {
			e1.printStackTrace();
		}
		int amt = 3;
		int prefMeasure = 3;
		int prefDepth = 2;
		System.out.println("This program will generate songs in the MIDI format for you to listen to.\nYou will be presented with a pair of songs at a time to listen to.\nAfter listening to each pair of songs, you will choose which one sounds the most like a human composed it.\nAfter listening to " + amt + " pairs of songs, you will be presented with a song generated by this program and a song composed by a human.\nYou will then attempt to determine which one this program generated.");
		System.out.println("By continuing, you are allowing this program to write files and create folders on this computer.\nType \"1\" to begin, or type \"-1\" to quit. You may type \"-1\" at any time if you wish to discontinue the process.");
		while(s.hasNext()) {
			String in = s.next();
			if(in.equals("1")) {
				break;
			} else if(in.equals("-1")) {
				System.out.println("Your responses were not recorded.");
				return;
			} else
				System.out.println("Bad input. Try again.");
		}
		try {
			new File(".\\Listen to these").mkdirs();
			for(int i = 0; i < amt; i++) {
				System.out.println("Find the directory that this program is in. There should be a folder titled \"Listen to these\".\nWithin this folder, there are two files, \"Song 0.mid\" and \"Song 1.mid\". Listen to both of these.");
				int prefMeasure1 = (int) (Math.random() * 9) + 1;
				int prefDepth1 = (int) (Math.random() * 9) + 1;
				SimpleCompositions.fullCompose(5, prefDepth1, prefMeasure1, source).write(new File(".\\Listen to these\\Song 0.mid"), false);
				SimpleCompositions.fullCompose(5, prefDepth, prefMeasure, source).write(new File(".\\Listen to these\\Song 1.mid"), false);
				System.out.println("Which of the two songs do you prefer? Enter \"0\" for \"Song 0.mid\" or \"1\" for \"Song 1.mid\".");
				while(s.hasNext()) {
					String in = s.next();
					if(in.equals("1")) {
						System.out.println("You preferred \"Song 1.mid\".");
						prefMeasure = prefMeasure1;
						prefDepth = prefDepth1;
						debug += i + "\n" + prefMeasure + "\n" + prefDepth + "\n\n";
						break;
					} else if(in.equals("0")) {
						System.out.println("You preferred \"Song 0.mid\".");
						debug += i + "\n" + prefMeasure + "\n" + prefDepth + "\n\n";
						break;
					} else if(in.equals("-1")) {
						System.out.println("Your responses were not recorded.");
						return;
					} else
						System.out.println("Bad input. Try again.");
				}
			}
			int real = (int) (Math.random() * 2);
			SimpleCompositions.fullCompose(5, prefDepth, prefMeasure, source).write(new File(".\\Listen to these\\Song " + real + ".mid"), false);
			source.getRandomSegment(5).write(new File(".\\Listen to these\\Song " + real + ".mid"), false);
			System.out.println("Now you will attempt to discern if \"Song 0.mid\" or \"Song 1.mid\" was composed by a human.\nEnter \"0\" if you believe that \"Song 0.mid\" was composed by a human or \"1\" if you believe that \"Song 1.mid\" was composed by a human.");
			while(s.hasNext()) {
				String in = s.next();
				if(in.equals("0")) {
					System.out.println("You believe that \"Song 0.mid\" was composed by a human.");
					debug += "f\n" + (real == 0 ? "1": "0");
					break;
				} else if(in.equals("1")) {
					System.out.println("You believe that \"Song 1.mid\" was composed by a human.");
					debug += "f\n" + (real == 1 ? "1": "0");
					break;
				} else if(in.equals("-1")) {
					System.out.println("Your responses were not recorded.");
					return;
				} else
					System.out.println("Bad input. Try again.");
			}
			File f = new File("data.txt");
			FileWriter fw = new FileWriter(f);
			fw.write(debug);
			fw.close();
		} catch(IOException e) {
			e.printStackTrace();
		}
		s.close();
		// TODO write procedures (Tues night 8/23/16)
	}
}
